@page
@using ite4160.Models
@model EventModel
@{
    ViewData["Title"] = "Events";
}
<h1>@ViewData["Title"]</h1>

<form>
    <select onchange='this.form.submit()' type="submit" asp-for="PageSize" asp-items="new SelectList(new int[]{5, 10, 25})">
            <option value="">Events per page</option>
    </select>
    @Html.Hidden("sort", @Model.CallerSort)
    @Html.Hidden("filter", @Model.CurrentFilter)
    @Html.Hidden("pageSize", @Model.PageSize)
<noscript><input type="submit" value="Submit"></noscript>
</form>

<form asp-page="./Event" method="get">
    <div class="form-actions no-color">
        <p>
            Find:
            <input type="text" name="filter" value="@Model.CurrentFilter" />
                @Html.Hidden("sort", @Model.CallerSort)
                @Html.Hidden("pageSize", @Model.PageSize)
            <input type="submit" value="Find" class="btn btn-primary" />
            <a asp-page="./Event" asp-route-pageSize="@Model.PageSize" class="btn btn-secondary">All Events</a>
        </p>
    </div>
</form>


<form method="get">

    @{
        var pickUp = @Model.EventTypes.Contains(EventType.PickUp);
    }

    <input onchange='this.form.submit()' checked="@pickUp" name="eventType" value="pickup" type="checkbox" id="pickup" />
    <label for="pickup">Pick-up</label>

    <noscript><input type="submit" value="Submit"></noscript>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @{var callerSort = @Model.CallerSort == null ? "caller_asc" : @Model.CallerSort;}

                <a  asp-page="./Event"
                    asp-route-sort="@callerSort"
                    asp-route-pageSize="@Model.PageSize"
                    asp-route-pageIndex="@Model.Events.PageIndex"
                >
                    @Html.DisplayNameFor(model => model.Events[0].Call.Caller)
                </a>

            </th>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].Type)
            </th>
            <th>
                @{var receiverSort = @Model.ReceiverSort == null ? "receiver_asc" : @Model.ReceiverSort;}

                <a asp-page="./Event"
                    asp-route-sort="@receiverSort"
                    asp-route-pageSize="@Model.PageSize"
                    asp-route-pageIndex="@Model.Events.PageIndex"
                >
                @Html.DisplayNameFor(model => model.Events[0].Call.Receiver)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].Timestamp)
            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Events) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Call.Caller)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Call.Receiver)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Timestamp)
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.Events.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Events.HasNextPage ? "disabled" : "";
}

<a asp-page="./Event"
    asp-route-pageSize="@Model.PageSize"
    asp-route-pageIndex="@(Model.Events.PageIndex - 1)"
    asp-route-sort="@Model.CurrentSort"
    asp-route-filter="@Model.CurrentFilter"
    class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Event"
    asp-route-pageSize="@Model.PageSize"
    asp-route-pageIndex="@(Model.Events.PageIndex + 1)"
    asp-route-sort="@Model.CurrentSort"
    asp-route-filter="@Model.CurrentFilter"
    class="btn btn-primary @nextDisabled">
    Next
</a>

