@page
@using ite4160.Models
@using System.Collections.Generic
@model EventModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "All Events";
}

@functions{
    string Param(string name) => Request.Query[name];
}

@{
    var pageIndex = Param("pageIndex");
    var pageSize = Param("pageSize");
    var sort = Param("sort");
    var filter = Param("filter");
    var pickup = Param("pickup");
    var dial = Param("dial");
    var established = Param("established");
    var end = Param("end");
    var hangup = Param("hangup");
}

<h1>@ViewData["Title"]</h1>

<div class="d-inline-block h6">Events per page:</div>
<form class="d-inline-block">
    <select onchange='this.form.submit()' type="submit" asp-for="PageSize" asp-items="new SelectList(new int[]{5, 10, 25})">
    </select>
    @Html.Hidden("sort", @sort)
    @Html.Hidden("filter", @filter)

<noscript><input type="submit" value="Submit"></noscript>
</form>

<form asp-page="./Event" method="get">
    <div class="form-actions no-color">
        <p>
            <span class="h6">Find:</span>
            <input type="text" name="filter" value="@Model.CurrentFilter" />
                @Html.Hidden("sort", @Model.CurrentSort)
                @Html.Hidden("pageSize", @Model.PageSize)
            <input type="submit" value="Find" class="btn btn-primary" />
            <a asp-page="./Event" asp-route-pageSize="@pageSize" class="btn btn-secondary">All Events</a>
            <a  class="btn btn-success"
                asp-page="Event"
                asp-route-export="true"
                asp-route-sort="@sort"
                asp-route-filter="@filter"
                asp-route-pickup="@pickup"
                asp-route-dial="@dial"
                asp-route-established="@established"
                asp-route-end="@end"
                asp-route-hangup="@hangup"
                >Export
            </a>
        </p>
    </div>
</form>

<form method="get">

    @functions{
        bool HasEventType(EventType type) => @Model.EventTypes.Contains(type);
    }

    <input id="pickup" value="true" name="pickup" checked="@HasEventType(EventType.PickUp)" type="checkbox" onchange='this.form.submit()'/>
    <label for="pickup">Pick-up</label>

    <input id="dial" value="true" name="dial" checked="@HasEventType(EventType.Dial)" type="checkbox" onchange='this.form.submit()'/>
    <label for="dial">Dialling</label>

    <input id="established" value="true" name="established" checked="@HasEventType(EventType.CallEstablished)" type="checkbox" onchange='this.form.submit()'/>
    <label for="established">Call Established</label>

    <input id="end" value="true" name="end" checked="@HasEventType(EventType.CallEnd)" type="checkbox" onchange='this.form.submit()'/>
    <label for="end">Call End</label>

    <input id="hangup" value="true" name="hangup" checked="@HasEventType(EventType.HangUp)" type="checkbox" onchange='this.form.submit()'/>
    <label for="hangup">Hang-up</label>

    @Html.Hidden("pageSize", @Model.PageSize)
    @Html.Hidden("sort", @Model.CurrentSort)
    @Html.Hidden("filter", @Model.CurrentFilter)

</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @{var callerSort = @Model.CallerSort == null ? "caller_asc" : @Model.CallerSort;}

                <a  asp-page="./Event"
                    asp-route-sort="@callerSort"
                    asp-route-filter="@Model.CurrentFilter"
                    asp-route-pageSize="@pageSize"
                    asp-route-pageIndex="@pageIndex"
                >
                    @Html.DisplayNameFor(model => model.Events[0].Call.Caller)
                </a>

            </th>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].Type)
            </th>
            <th>
                @{var receiverSort = @Model.ReceiverSort == null ? "receiver_asc" : @Model.ReceiverSort;}

                <a asp-page="./Event"
                    asp-route-sort="@receiverSort"
                    asp-route-filter="@Model.CurrentFilter"
                    asp-route-pageSize="@pageSize"
                    asp-route-pageIndex="@pageIndex"
                >
                @Html.DisplayNameFor(model => model.Events[0].Call.Receiver)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Events[0].Timestamp)
            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Events) {
        <tr onclick="location.href = '@(Url.Page("CallDetails", new { id = item.Call.ID }))'" class="hover-g">
            <td>
                @Html.DisplayFor(modelItem => item.Call.Caller)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Call.Receiver)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Timestamp)
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.Events.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Events.HasNextPage ? "disabled" : "";
}

<a asp-page="./Event"
    asp-route-pageSize="@pageSize"
    asp-route-pageIndex="@(Model.Events.PageIndex - 1)"
    asp-route-sort="@Model.CurrentSort"
    asp-route-filter="@Model.CurrentFilter"
    class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Event"
    asp-route-pageSize="@pageSize"
    asp-route-pageIndex="@(Model.Events.PageIndex + 1)"
    asp-route-sort="@Model.CurrentSort"
    asp-route-filter="@Model.CurrentFilter"
    class="btn btn-primary @nextDisabled">
    Next
</a>

